AWSTemplateFormatVersion: 2010-09-09
Description: This CloudFormation template will deploy a Python-based CPU monitoring web application
Resources:
  WebhostSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: vpc-04c0e1f54284ed3d6
      GroupName: !Sub ${AWS::StackName} - Website Security Group
      GroupDescription: Allow Access to the Webhost on Port 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 163.47.68.41/32
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - Web Host Security Group

  WebServerInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: ami-0ab98c3772e9e89b2
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
      NetworkInterfaces:
        - GroupSet:
            - !Ref WebhostSecurityGroup
          AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref PublicSubnet
      UserData: 
        Fn::Base64: !Sub 
          - |
            #!/bin/bash -xe
            # Update system packages
            dnf update -y
            dnf install -y python3.12 python3.12-pip
            mkdir -p /opt/webapp
            cd /opt/webapp
            wget ${CPULoad} -O cpu-load.py
            pip3.12 install flask requests

            # Create systemd service file
            cat << 'EOF' > /etc/systemd/system/webapp.service
            [Unit]
            Description=Python Web Application
            After=network.target

            [Service]
            User=root
            WorkingDirectory=/opt/webapp
            ExecStart=/usr/bin/python3.12 cpu-load.py
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOF

            # Set permissions and start service
            chmod 644 /etc/systemd/system/webapp.service
            systemctl daemon-reload
            systemctl enable webapp
            systemctl start webapp

            # Wait for application to be ready
            timeout=300
            elapsed=0
            while [[ $elapsed -lt $timeout ]]; do
                if curl -s http://localhost/health > /dev/null; then
                    echo "Application is ready"
                    break
                fi
                sleep 10
                elapsed=$((elapsed+10))
            done
          - {
            CPULoad: "https://ws-assets-prod-iad-r-sfo-f61fc67057535f1b.s3.us-west-1.amazonaws.com/f3a3e2bd-e1d5-49de-b8e6-dac361842e76/cpu-load.py"
            }

Outputs:
  PublicIP:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt
          - WebServerInstance
          - PublicIp
    Description: Newly created webhost Public IP
  PublicDNS:
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - WebServerInstance
          - PublicDnsName
    Description: Newly created webhost Public DNS URL